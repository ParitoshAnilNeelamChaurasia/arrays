// https://leetcode.com/problems/snake-in-matrix/description/

#include <vector>
#include <string>

class Solution {
public:
    int m;
    std::vector<std::vector<int>> directions = {
        {0, 1},  // RIGHT
        {1, 0},  // DOWN
        {0, -1}, // LEFT
        {-1, 0}  // UP
    };

    bool is_possible(int i, int j) {
        return i >= 0 && i < m && j >= 0 && j < m;
    }

    int finalPositionOfSnake(int n, std::vector<std::string>& commands) {
        m = n;
        int x = 0, y = 0;

        for (const auto& command : commands) {
            int dir = -1;
            if (command == "RIGHT") dir = 0;
            else if (command == "DOWN") dir = 1;
            else if (command == "LEFT") dir = 2;
            else if (command == "UP") dir = 3;

            int new_x = x + directions[dir][0];
            int new_y = y + directions[dir][1];

            if (is_possible(new_x, new_y)) {
                x = new_x;
                y = new_y;
            }
        }

        return x * n + y;
    }
};
